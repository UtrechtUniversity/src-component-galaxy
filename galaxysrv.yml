---
- name: Install Galaxy Server
  hosts: "{{ lookup('env', 'variable_host') | default('localhost', true) }}" # workaround because SRC needs localhost, but molecule needs specifc hostvars

  pre_tasks:

    - name: Include config tasks and load variables
      ansible.builtin.include_tasks: tasks/set_config.yml

    - name: Install Dependencies
      ansible.builtin.apt:
        update_cache: true
        name:
          - 'git'
          - 'python3-psycopg2'
          - 'python3-virtualenv'
          - 'python3-dev'
          - 'gcc'
          - 'acl'
          - 'gnutls-bin' # workaround for git-clone issue, https://stackoverflow.com/a/53147659/4326632
        state: present

    - name: Set Galaxy socket upstream definition
      block:

      - name: Find Galaxy socket upstream definition
        ansible.builtin.lineinfile:
          path: /etc/nginx/conf.d/ssl_main.conf
          state: absent
          line: "upstream galaxy { server {{ galaxy_config.gravity.gunicorn.bind }}; }"
        check_mode: true
        changed_when: false
        register: detect_nginx_upstream

      - name: Add Galaxy socket upstream definition
        ansible.builtin.lineinfile:
          path: /etc/nginx/conf.d/ssl_main.conf
          insertafter: EOF
          line: "upstream galaxy { server {{ galaxy_config.gravity.gunicorn.bind }}; }"
        when: detect_nginx_upstream.found == 0

  tasks:

    - name: Workaround to install requirements.yml on SURF ResearchCloud
      ansible.builtin.include_role: { name: install_roles }
      tags: molecule-notest

    - name: Include role installed using install_roles workaround
      ansible.builtin.include_role: { name: galaxyproject.postgresql }

    - name: Include role installed using install_roles workaround
      ansible.builtin.include_role:
        name: galaxyproject.postgresql_objects
        apply:
          become: true
          become_user: postgres
  
    - name: Include role installed using install_roles workaround
      ansible.builtin.include_role: { name: galaxyproject.galaxy }

    - name: Add nginx user to galaxy group
      user:
        name: www-data
        groups: "{{ galaxy_user }}"
        append: true
      notify: restart nginx

    - name: Get Galaxy service Status
      ansible.builtin.systemd:
        name: "galaxy.target"
      check_mode: true
      register: galaxy_status

    - name: Galaxy gravity start
      command: "/usr/local/bin/galaxyctl start"
      when: "galaxy_status.status.ActiveState == 'inactive'"

    - name: Install custom tools and workflows
      when: _galaxy_bootstrap
      block:

      - name: Wait for galaxy server to come up
        ansible.builtin.uri:
          url: "http://localhost/api/version"
          unix_socket: "{{ _galaxy_gunicorn_socket_path }}"
        register: galaxy_service_live
        until: "galaxy_service_live.status == 200"
        retries: 60
        delay: 10 # check every 10 seconds for a maximum of 10 minutes

      - name: Include tasks to install custom tools and workflows
        ansible.builtin.include_tasks: tasks/install_tools.yml
  
  roles:
    - role: nginx-reverse_proxy
      vars:
        nginx_reverse_proxy_locations: "{{ galaxy_nginx_vhost_config }}"
  
  post_tasks:

    - name: Remove bootstrap API key
      when: _galaxy_bootstrap
      ansible.builtin.lineinfile:
        path: "{{ galaxy_config_dir }}/galaxy.yml"
        regexp: '.*bootstrap_admin_api_key:'
        state: absent
      notify: galaxy gravity restart

  handlers:

    - name: Restart nginx
      ansible.builtin.service:
        name: nginx
        state: restarted
      listen: restart nginx

    - name: Galaxy gravity restart
      command: "/usr/local/bin/galaxyctl graceful"
      listen: "restart galaxy"