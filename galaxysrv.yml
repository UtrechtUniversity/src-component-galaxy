- name: Install Galaxy Server
  hosts: "{{ lookup('env', 'variable_host') | default('localhost', true) }}" # workaround because SRC needs localhost, but molecule needs specifc hostvars
  vars:
    galaxy_config_style: yaml
    galaxy_layout: custom
    _src_galaxy_root: /srv/galaxy
    galaxy_server_dir: "{{ _src_galaxy_root }}/server"
    galaxy_root: "{{ galaxy_server_dir }}" # workaround https://github.com/galaxyproject/ansible-galaxy/issues/138
    galaxy_venv_dir: "{{ _src_galaxy_root }}/venv"
    galaxy_config_dir: "{{ _src_galaxy_root }}/config"
    galaxy_mutable_data_dir: "{{ src_galaxy_storage_path | default(_src_galaxy_root+'/datadir', true) }}" # component variable src_galaxy_storage_path
    galaxy_commit_id: "release_{{ src_galaxy_version | default('23.0', true) }}" # component variable src_galaxy_version
    galaxy_separate_privileges: true
    galaxy_create_user: true
    galaxy_manage_paths: true
    galaxy_clone_depth: 1
    galaxy_user: galaxy
    galaxy_privsep_user: gxpriv
    galaxy_group: galaxy
    galaxy_client_use_prebuilt: true
    galaxy_systemd_root: true
    postgresql_objects_users:
      - name: galaxy
        password: null
    postgresql_objects_databases:
      - name: galaxy
        owner: galaxy
    gunicorn_socket_dir: "{{ _src_galaxy_root}}/run"
    galaxy_extra_dirs:
      - "{{ gunicorn_socket_dir }}"
    galaxy_job_config:
      runners:
        local_runner:
          load: galaxy.jobs.runners.local:LocalJobRunner
          workers: 4
      handling:
        assign: ['db-skip-locked']
      execution:
        default: local_env
        environments:
          local_env:
            runner: local_runner
            tmp_dir: true
      tools:
        - class: local # these special tools that aren't parameterized for remote execution - expression tools, upload, etc
          environment: local_env
    galaxy_config:
      galaxy:
        use_remote_user: true
        remote_user_maildomain: "src.surf-hosted.nl"
        database_connection: "postgresql:///galaxy?host=/var/run/postgresql"
        file_path: "{{ galaxy_mutable_data_dir }}/datasets"
        job_config: "{{ galaxy_job_config }}"
      gravity:
        galaxy_root: "{{ galaxy_server_dir }}"
        galaxy_user: "{{ galaxy_user }}"
        virtualenv: "{{ galaxy_venv_dir }}"
        process_manager: systemd
        gunicorn:
          # listening options
          bind: "unix:{{ gunicorn_socket_dir }}/gunicorn.sock"
          # performance options
          workers: 2
          # Other options that will be passed to gunicorn
          # This permits setting of 'secure' headers like REMOTE_USER (and friends)
          # https://docs.gunicorn.org/en/stable/settings.html#forwarded-allow-ips
          extra_args: '--forwarded-allow-ips="*"'
          # This lets Gunicorn start Galaxy completely before forking which is faster.
          # https://docs.gunicorn.org/en/stable/settings.html#preload-app
          preload: true
        celery:
          concurrency: 2
          enable_beat: true
          enable: true
          queues: celery,galaxy.internal,galaxy.external
          pool: threads
          memory_limit: 2
          loglevel: DEBUG
        handlers:
          handler:
            processes: 2
            pools:
              - job-handlers
              - workflow-schedulers
  pre_tasks:

    - name: Install Dependencies
      ansible.builtin.apt:
        name:
          - 'git'
          - 'python3-psycopg2'
          - 'python3-virtualenv'
          - 'python3-dev'
          - 'gcc'
          - 'acl'
          - 'gnutls-bin' # workaround for git-clone issue, https://stackoverflow.com/a/53147659/4326632
        state: present
  
    - name: Set Galaxy socket upstream definition
      tags: molecule-notest
      block:

      - name: Find Galaxy socket upstream definition
        ansible.builtin.lineinfile:
          path: /etc/nginx/conf.d/ssl_main.conf
          state: absent
          line: "upstream galaxy { server {{ galaxy_config.gravity.gunicorn.bind }}; }"
        check_mode: true
        changed_when: false
        register: detect_nginx_upstream

      - name: Add Galaxy socket upstream definition
        ansible.builtin.lineinfile:
          path: /etc/nginx/conf.d/ssl_main.conf
          insertafter: EOF
          line: "upstream galaxy { server {{ galaxy_config.gravity.gunicorn.bind }}; }"
        when: detect_nginx_upstream.found == 0

  tasks:

    - name: Workaround to install requirements.yml on SURF ResearchCloud
      ansible.builtin.include_role: { name: install_roles }
      tags: molecule-notest

    - name: Include role installed using install_roles workaround
      ansible.builtin.include_role: { name: galaxyproject.postgresql }

    - name: Include role installed using install_roles workaround
      ansible.builtin.include_role:
        name: galaxyproject.postgresql_objects
        apply:
          become: true
          become_user: postgres
  
    - name: Include role installed using install_roles workaround
      ansible.builtin.include_role: { name: galaxyproject.galaxy }

    - name: Add nginx user to galaxy group
      user:
        name: www-data
        groups: "{{ galaxy_user }}"
        append: true
      tags: molecule-notest
      notify: restart nginx
  
  post_tasks:

    - name: Get Galaxy service Status
      ansible.builtin.systemd:
        name: "galaxy.target"
      check_mode: true
      register: galaxy_status

    - name: Galaxy gravity start
      command: "/usr/local/bin/galaxyctl start"
      when: "galaxy_status.status.ActiveState == 'inactive'"

  roles:
    - role: nginx-reverse_proxy
      tags: molecule-notest
      vars:
        nginx_reverse_proxy_locations:
          - name: galaxy
            location: /
            backend: http://galaxy
            auth: sram
          - name: static
            location: /static
            alias: "{{ galaxy_server_dir }}/static"
            auth: noauth
          - name: static_plugins
            location: "~ ^/plugins/(?<plug_type>.+?)/(?<vis_name>.+?)/static/(?<static_file>.*?)$"
            expires: '24'
            auth: noauth

  handlers:

    - name: Restart nginx
      ansible.builtin.service:
        name: nginx
        state: restarted
      listen: restart nginx

    - name: Galaxy gravity restart
      command: "/usr/local/bin/galaxyctl graceful"
      listen: "restart galaxy"
