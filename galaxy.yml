- hosts: localhost
  vars:
    _src_galaxy_root: "{{ src_galaxy_root | default('/srv/galaxy') }}" # component variable src_galaxy_root
    galaxy_config_style: yaml
    galaxy_layout: custom
    galaxy_server_dir: "{{ _src_galaxy_root }}/server"
    galaxy_venv_dir: "{{ _src_galaxy_root }}/venv"
    galaxy_config_dir: "{{ _src_galaxy_root }}/config"
    galaxy_mutable_data_dir: "{{ src_galaxy_storage_path | default('/srv/galaxy/datadir') }}" # component variable src_galaxy_storage_path
    galaxy_manage_systemd: yes
    galaxy_commit_id: v24.0.0
    galaxy_separate_privileges: yes
    galaxy_create_user: yes
    galaxy_manage_paths: yes
    galaxy_user: galaxy
    galaxy_privsep_user: gxpriv
    galaxy_group: galaxy
    galaxy_client_use_prebuilt: yes
    postgresql_objects_users:
      - name: galaxy
        password: null
    postgresql_objects_databases:
      - name: galaxy
        owner: galaxy
    galaxy_config:
      galaxy:
        use_remote_user: true
      uwsgi:
        socket: 127.0.0.1:4001
        buffer-size: 16384
        processes: 1
        threads: 4
        offload-threads: 2
        static-map:
          - /static/style={{ galaxy_server_dir }}/static/style/blue
          - /static={{ galaxy_server_dir }}/static
        master: true
        virtualenv: "{{ galaxy_venv_dir }}"
        pythonpath: "{{ galaxy_server_dir }}/lib"
        module: galaxy.webapps.galaxy.buildapp:uwsgi_app()
        thunder-lock: true
        die-on-term: true
        hook-master-start:
          - unix_signal:2 gracefully_kill_them_all
          - unix_signal:15 gracefully_kill_them_all
        py-call-osafterfork: true
        enable-threads: true
        mule:
          - lib/galaxy/main.py
          - lib/galaxy/main.py
        farm: job-handlers:1,2
      galaxy:
        database_connection: "postgresql:///galaxy?host=/var/run/postgresql"
  pre_tasks:
    - name: Install Dependencies
      apt:
        name: ['git', 'python3-psycopg2', 'python3-virtualenv', 'acl', 'supervisor']
      become: yes
  tasks:
    - include_role: {name: install_roles } # workaround to install requirements.yml on SRC
    - include_role:
        name: galaxyproject.postgresql
        apply:
          become: yes
    - include_role:
        name: galaxyproject.postgresql_objects
        apply:
          become: yes
          become_user: postgres
    - include_role: {name: galaxyproject.galaxy }
  roles:
    - role: nginx-reverse_proxy
      vars:
        nginx_reverse_proxy_locations:
          - name: galaxy
            location: /
            backend: http://localhost:8080/
            auth: sram
          - name: static
            location: /static
            alias: "{{ galaxy_server_dir }}/static"
          - name: static_plugins
            location: "~ ^/plugins/(?<plug_type>.+?)/(?<vis_name>.+?)/static/(?<static_file>.*?)$"
            expires: '24'
  handlers:
    - name: Restart Galaxy
      supervisorctl:
        name: galaxy
        state: restarted
      listen: restart galaxy
