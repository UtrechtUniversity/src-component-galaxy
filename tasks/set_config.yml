---
- name: Load internal variables
  ansible.builtin.include_vars: vars/internal_vars.yml

- name: Load component variables
  ansible.builtin.include_vars: vars/src_galaxy_vars.yml

- name: Set admins
  block:
    - name: Set admins from CO group
      ansible.builtin.set_fact:
        _galaxy_admins: "{{ fact_co_groups[_galaxy_admin_co_group] | product(['@' + _galaxy_remote_user_maildomain]) | map('join') | list | join(',') }}"
      when: fact_co_groups[_galaxy_admin_co_group] is defined

    - name: Set no admins
      ansible.builtin.set_fact:
        _galaxy_admins: ""
      when: fact_co_groups[_galaxy_admin_co_group] is not defined

- name: Determine whether to bootstrap Galaxy
  set_fact:
    _galaxy_do_bootstrap:  "{{ _galaxy_bootstrap and _galaxy_tool_files | length + _galaxy_workflow_files | length + _galaxy_custom_repo | length  > 0}}"

- name: Generate a bootstrap key
  when: _galaxy_do_bootstrap
  ansible.builtin.set_fact:
    _galaxy_bootstrap_api_key: "{{ lookup('ansible.builtin.password', '/dev/null', chars=['ascii_lowercase', 'digits'], length=50) }}"

- name: Load nginx variables
  ansible.builtin.include_vars: vars/nginx_vars.yml

- name: Load Galaxy role variables
  ansible.builtin.include_vars: vars/galaxy_vars.yml

# Dump galaxy_config in a new variable.
# Needed because galaxyproject.galaxy parses the galaxy['galaxy_config'] dict in a special way:
# it uses a plugin designed to mimic uwsgi's non-stanadard yaml implementation.
# The result is that "omit" placeholders are treated as strings.
# So we cannot pass galaxy_config to the role directly, and must instead save and 'resolve' the omissions here.
# _galaxy_config is then passed to the role in galaxysrv.yml
- name: Save _galaxy_config
  ansible.builtin.set_fact:
    _galaxy_config: "{{ galaxy_config }}"
